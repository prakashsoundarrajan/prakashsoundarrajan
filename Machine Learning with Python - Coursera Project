import itertools
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import NullFormatter
import pandas as pd
import numpy as np
import matplotlib.ticker as ticker
from sklearn import preprocessing
%matplotlib inline
df = pd.read_csv('loan_train.csv')
df.head()
df.shape
df['loan_status'].value_counts()
import seaborn as sns

bins = np.linspace(df.Principal.min(), df.Principal.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'Principal', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()
bins = np.linspace(df.age.min(), df.age.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'age', bins=bins, ec="k")

g.axes[-1].legend()
plt.show()
df['dayofweek'] = df['effective_date'].dt.dayofweek
bins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)
g = sns.FacetGrid(df, col="Gender", hue="loan_status", palette="Set1", col_wrap=2)
g.map(plt.hist, 'dayofweek', bins=bins, ec="k")
g.axes[-1].legend()
plt.show()
df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)
df.head()
df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)
df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)
df.head()
df.groupby(['education'])['loan_status'].value_counts(normalize=True)
df[['Principal','terms','age','Gender','education']].head()
Feature = df[['Principal','terms','age','Gender','weekend']]
Feature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)
Feature.drop(['Master or Above'], axis = 1,inplace=True)
Feature.head()
X = Feature
y = df['loan_status'].values
X= preprocessing.StandardScaler().fit(X).transform(X)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
#KNN
Ks = 10
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))

for n in range(1,Ks):
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)
    yhat=neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)
    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])
mean_acc
print( "The best accuracy was with", mean_acc.max(), "with k=", mean_acc.argmax()+1)
#The best accuracy was with 0.8142857142857143 with k= 3
#DECISION TREE
from sklearn.tree import DecisionTreeClassifier
drugtree = DecisionTreeClassifier(criterion='entropy', max_depth= 4)
drugtree.fit(X_train, y_train)
predtree = drugtree.predict(X_test)
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_test, predtree))
#DecisionTrees's Accuracy:  0.7714285714285715
#SVM
from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train) 
yhat = clf.predict(X_test)
print("SVM Accuracy: ", metrics.accuracy_score(y_test, yhat))
#SVM Accuracy:  0.7857142857142857
#LOGISTICS REGRESSION
from sklearn.linear_model import LogisticRegression
LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)
yhat_log = LR.predict(X_test)
print("Log Reg Accuracy: ", metrics.accuracy_score(y_test, yhat_log))
#Log Reg Accuracy:  0.8
from sklearn.metrics import jaccard_score
from sklearn.metrics import f1_score
from sklearn.metrics import log_loss
#LOAN TEST DATA PREPROCESSING
test_df = pd.read_csv('loan_test.csv')
test_df['due_date'] = pd.to_datetime(test_df['due_date'])
test_df['effective_date'] = pd.to_datetime(test_df['effective_date'])
test_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)
test_df['dayofweek'] = test_df['effective_date'].dt.dayofweek
test_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)
test_Feature = test_df[['Principal','terms','age','Gender','weekend']]
test_Feature = pd.concat([test_Feature, pd.get_dummies(test_df['education'])], axis=1)
test_Feature.drop(['Master or Above'], axis = 1,inplace=True)
test_X = test_Feature
test_y = test_df['loan_status'].values
test_X = preprocessing.StandardScaler().fit(test_X).transform(test_X)
neigh = KNeighborsClassifier(n_neighbors = 3).fit(X_train, y_train)
knn_test=neigh.predict(test_X)
predtree_test = drugtree.predict(test_X)
svm_test = clf.predict(test_X)
log_test = LR.predict(test_X)
Log_J = "%.2f" % jaccard_score(test_y, log_test, pos_label='PAIDOFF')
SVM_J = "%.2f" % jaccard_score(test_y, svm_test, pos_label='PAIDOFF')
KNN_J = "%.2f" % jaccard_score(test_y, knn_test, pos_label='PAIDOFF')
DT_J = "%.2f" % jaccard_score(test_y, predtree_test, pos_label='PAIDOFF')
Log_F = "%.2f" % f1_score(test_y, log_test, average='weighted')
SVM_F = "%.2f" % f1_score(test_y, svm_test, average='weighted')
KNN_F = "%.2f" % f1_score(test_y, knn_test, average='weighted')
DT_F = "%.2f" % f1_score(test_y, predtree_test, average='weighted')
test_y_prob = LR.predict_proba(test_X)
LogLoss = "%.2f" % log_loss(test_y, test_y_prob)
rep = {'Algorithm': ['KNN', 'Decision Tree', 'SVM', 'LogisticRegression'], 'Jaccard': [KNN_J, DT_J, SVM_J, Log_J], 
       'F1-score': [KNN_F, DT_F, SVM_F, Log_F], 'LogLoss': ['NA', 'NA', 'NA', LogLoss]}
Report = pd.DataFrame.from_dict(rep)
Report
#REPORT IN DATAFRAME
#Algorithm	Jaccard	F1-score	LogLoss
#0	KNN	0.61	0.65	NA
#1	Decision Tree	0.75	0.67	NA
#2	SVM	0.72	0.65	NA
#3	LogisticRegression	0.74	0.63	0.57

